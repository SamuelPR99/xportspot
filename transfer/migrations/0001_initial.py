# Generated by Django 5.2.3 on 2025-06-29 12:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('spotify_user_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('spotify_access_token', models.TextField(blank=True, null=True)),
                ('spotify_refresh_token', models.TextField(blank=True, null=True)),
                ('spotify_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=10, null=True)),
                ('spotify_premium', models.BooleanField(default=False)),
                ('auto_import_playlists', models.BooleanField(default=False)),
                ('email_notifications', models.BooleanField(default=True)),
                ('spotify_connected_at', models.DateTimeField(blank=True, null=True)),
                ('last_spotify_sync', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spotify_id', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('total_tracks', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('artist', models.CharField(max_length=300)),
                ('album', models.CharField(blank=True, max_length=300)),
                ('spotify_track_id', models.CharField(blank=True, max_length=100)),
                ('youtube_video_id', models.CharField(blank=True, max_length=50)),
                ('duration_ms', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('title', 'artist')},
            },
        ),
        migrations.CreateModel(
            name='TransferJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('processing', 'Procesando'), ('completed', 'Completado'), ('failed', 'Fallido'), ('partial', 'Parcialmente completado')], default='pending', max_length=20)),
                ('youtube_playlist_id', models.CharField(blank=True, max_length=100)),
                ('youtube_playlist_name', models.CharField(blank=True, max_length=200)),
                ('total_songs', models.IntegerField(default=0)),
                ('processed_songs', models.IntegerField(default=0)),
                ('successful_transfers', models.IntegerField(default=0)),
                ('failed_transfers', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transfer.playlist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlaylistSong',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transfer.playlist')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transfer.song')),
            ],
            options={
                'ordering': ['position'],
                'unique_together': {('playlist', 'song', 'position')},
            },
        ),
        migrations.CreateModel(
            name='SongTransferResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('success', 'Exitoso'), ('failed', 'Fallido'), ('duplicate', 'Duplicado'), ('not_found', 'No encontrado')], max_length=20)),
                ('youtube_video_id', models.CharField(blank=True, max_length=50)),
                ('search_query', models.CharField(max_length=500)),
                ('error_message', models.TextField(blank=True)),
                ('processed_at', models.DateTimeField(auto_now_add=True)),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transfer.song')),
                ('transfer_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='song_results', to='transfer.transferjob')),
            ],
            options={
                'unique_together': {('transfer_job', 'song')},
            },
        ),
    ]
